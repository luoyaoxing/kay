// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"kay/app/product/service/internal/data/ent/product"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Product is the model entity for the Product schema.
type Product struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// VersionId holds the value of the "versionId" field.
	VersionId int64 `json:"versionId,omitempty"`
	// VersionName holds the value of the "versionName" field.
	VersionName string `json:"versionName,omitempty"`
	// ProductId holds the value of the "productId" field.
	ProductId int64 `json:"productId,omitempty"`
	// ProductName holds the value of the "productName" field.
	ProductName string `json:"productName,omitempty"`
	// Price holds the value of the "price" field.
	Price int `json:"price,omitempty"`
	// Attr holds the value of the "attr" field.
	Attr string `json:"attr,omitempty"`
	// ProductDesc holds the value of the "productDesc" field.
	ProductDesc string `json:"productDesc,omitempty"`
	// Addtime holds the value of the "addtime" field.
	Addtime time.Time `json:"addtime,omitempty"`
	// Mtime holds the value of the "mtime" field.
	Mtime time.Time `json:"mtime,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Product) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case product.FieldID, product.FieldVersionId, product.FieldProductId, product.FieldPrice:
			values[i] = new(sql.NullInt64)
		case product.FieldVersionName, product.FieldProductName, product.FieldAttr, product.FieldProductDesc:
			values[i] = new(sql.NullString)
		case product.FieldAddtime, product.FieldMtime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Product", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Product fields.
func (pr *Product) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case product.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int64(value.Int64)
		case product.FieldVersionId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field versionId", values[i])
			} else if value.Valid {
				pr.VersionId = value.Int64
			}
		case product.FieldVersionName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field versionName", values[i])
			} else if value.Valid {
				pr.VersionName = value.String
			}
		case product.FieldProductId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field productId", values[i])
			} else if value.Valid {
				pr.ProductId = value.Int64
			}
		case product.FieldProductName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field productName", values[i])
			} else if value.Valid {
				pr.ProductName = value.String
			}
		case product.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				pr.Price = int(value.Int64)
			}
		case product.FieldAttr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field attr", values[i])
			} else if value.Valid {
				pr.Attr = value.String
			}
		case product.FieldProductDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field productDesc", values[i])
			} else if value.Valid {
				pr.ProductDesc = value.String
			}
		case product.FieldAddtime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field addtime", values[i])
			} else if value.Valid {
				pr.Addtime = value.Time
			}
		case product.FieldMtime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field mtime", values[i])
			} else if value.Valid {
				pr.Mtime = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Product.
// Note that you need to call Product.Unwrap() before calling this method if this Product
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Product) Update() *ProductUpdateOne {
	return (&ProductClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the Product entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Product) Unwrap() *Product {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Product is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Product) String() string {
	var builder strings.Builder
	builder.WriteString("Product(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", versionId=")
	builder.WriteString(fmt.Sprintf("%v", pr.VersionId))
	builder.WriteString(", versionName=")
	builder.WriteString(pr.VersionName)
	builder.WriteString(", productId=")
	builder.WriteString(fmt.Sprintf("%v", pr.ProductId))
	builder.WriteString(", productName=")
	builder.WriteString(pr.ProductName)
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", pr.Price))
	builder.WriteString(", attr=")
	builder.WriteString(pr.Attr)
	builder.WriteString(", productDesc=")
	builder.WriteString(pr.ProductDesc)
	builder.WriteString(", addtime=")
	builder.WriteString(pr.Addtime.Format(time.ANSIC))
	builder.WriteString(", mtime=")
	builder.WriteString(pr.Mtime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Products is a parsable slice of Product.
type Products []*Product

func (pr Products) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
