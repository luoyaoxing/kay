// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"kay/app/product/service/internal/data/ent/item"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Item is the model entity for the Item schema.
type Item struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// TotalStock holds the value of the "totalStock" field.
	TotalStock int `json:"totalStock,omitempty"`
	// ConsumeStock holds the value of the "consumeStock" field.
	ConsumeStock int `json:"consumeStock,omitempty"`
	// LeftStock holds the value of the "leftStock" field.
	LeftStock int `json:"leftStock,omitempty"`
	// Addtime holds the value of the "addtime" field.
	Addtime time.Time `json:"addtime,omitempty"`
	// Mtime holds the value of the "mtime" field.
	Mtime time.Time `json:"mtime,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Item) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case item.FieldID, item.FieldTotalStock, item.FieldConsumeStock, item.FieldLeftStock:
			values[i] = new(sql.NullInt64)
		case item.FieldAddtime, item.FieldMtime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Item", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Item fields.
func (i *Item) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case item.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int64(value.Int64)
		case item.FieldTotalStock:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field totalStock", values[j])
			} else if value.Valid {
				i.TotalStock = int(value.Int64)
			}
		case item.FieldConsumeStock:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field consumeStock", values[j])
			} else if value.Valid {
				i.ConsumeStock = int(value.Int64)
			}
		case item.FieldLeftStock:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field leftStock", values[j])
			} else if value.Valid {
				i.LeftStock = int(value.Int64)
			}
		case item.FieldAddtime:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field addtime", values[j])
			} else if value.Valid {
				i.Addtime = value.Time
			}
		case item.FieldMtime:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field mtime", values[j])
			} else if value.Valid {
				i.Mtime = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Item.
// Note that you need to call Item.Unwrap() before calling this method if this Item
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Item) Update() *ItemUpdateOne {
	return (&ItemClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the Item entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Item) Unwrap() *Item {
	tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Item is not a transactional entity")
	}
	i.config.driver = tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Item) String() string {
	var builder strings.Builder
	builder.WriteString("Item(")
	builder.WriteString(fmt.Sprintf("id=%v", i.ID))
	builder.WriteString(", totalStock=")
	builder.WriteString(fmt.Sprintf("%v", i.TotalStock))
	builder.WriteString(", consumeStock=")
	builder.WriteString(fmt.Sprintf("%v", i.ConsumeStock))
	builder.WriteString(", leftStock=")
	builder.WriteString(fmt.Sprintf("%v", i.LeftStock))
	builder.WriteString(", addtime=")
	builder.WriteString(i.Addtime.Format(time.ANSIC))
	builder.WriteString(", mtime=")
	builder.WriteString(i.Mtime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Items is a parsable slice of Item.
type Items []*Item

func (i Items) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
