// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"kay/app/product/service/internal/data/ent/predicate"
	"kay/app/product/service/internal/data/ent/product"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProductUpdate is the builder for updating Product entities.
type ProductUpdate struct {
	config
	hooks    []Hook
	mutation *ProductMutation
}

// Where adds a new predicate for the ProductUpdate builder.
func (pu *ProductUpdate) Where(ps ...predicate.Product) *ProductUpdate {
	pu.mutation.predicates = append(pu.mutation.predicates, ps...)
	return pu
}

// SetVersionId sets the "versionId" field.
func (pu *ProductUpdate) SetVersionId(i int64) *ProductUpdate {
	pu.mutation.ResetVersionId()
	pu.mutation.SetVersionId(i)
	return pu
}

// SetNillableVersionId sets the "versionId" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableVersionId(i *int64) *ProductUpdate {
	if i != nil {
		pu.SetVersionId(*i)
	}
	return pu
}

// AddVersionId adds i to the "versionId" field.
func (pu *ProductUpdate) AddVersionId(i int64) *ProductUpdate {
	pu.mutation.AddVersionId(i)
	return pu
}

// SetVersionName sets the "versionName" field.
func (pu *ProductUpdate) SetVersionName(s string) *ProductUpdate {
	pu.mutation.SetVersionName(s)
	return pu
}

// SetNillableVersionName sets the "versionName" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableVersionName(s *string) *ProductUpdate {
	if s != nil {
		pu.SetVersionName(*s)
	}
	return pu
}

// SetProductId sets the "productId" field.
func (pu *ProductUpdate) SetProductId(i int64) *ProductUpdate {
	pu.mutation.ResetProductId()
	pu.mutation.SetProductId(i)
	return pu
}

// SetNillableProductId sets the "productId" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableProductId(i *int64) *ProductUpdate {
	if i != nil {
		pu.SetProductId(*i)
	}
	return pu
}

// AddProductId adds i to the "productId" field.
func (pu *ProductUpdate) AddProductId(i int64) *ProductUpdate {
	pu.mutation.AddProductId(i)
	return pu
}

// SetProductName sets the "productName" field.
func (pu *ProductUpdate) SetProductName(s string) *ProductUpdate {
	pu.mutation.SetProductName(s)
	return pu
}

// SetNillableProductName sets the "productName" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableProductName(s *string) *ProductUpdate {
	if s != nil {
		pu.SetProductName(*s)
	}
	return pu
}

// SetPrice sets the "price" field.
func (pu *ProductUpdate) SetPrice(i int) *ProductUpdate {
	pu.mutation.ResetPrice()
	pu.mutation.SetPrice(i)
	return pu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (pu *ProductUpdate) SetNillablePrice(i *int) *ProductUpdate {
	if i != nil {
		pu.SetPrice(*i)
	}
	return pu
}

// AddPrice adds i to the "price" field.
func (pu *ProductUpdate) AddPrice(i int) *ProductUpdate {
	pu.mutation.AddPrice(i)
	return pu
}

// SetAttr sets the "attr" field.
func (pu *ProductUpdate) SetAttr(s string) *ProductUpdate {
	pu.mutation.SetAttr(s)
	return pu
}

// SetNillableAttr sets the "attr" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableAttr(s *string) *ProductUpdate {
	if s != nil {
		pu.SetAttr(*s)
	}
	return pu
}

// SetProductDesc sets the "productDesc" field.
func (pu *ProductUpdate) SetProductDesc(s string) *ProductUpdate {
	pu.mutation.SetProductDesc(s)
	return pu
}

// SetNillableProductDesc sets the "productDesc" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableProductDesc(s *string) *ProductUpdate {
	if s != nil {
		pu.SetProductDesc(*s)
	}
	return pu
}

// SetAddtime sets the "addtime" field.
func (pu *ProductUpdate) SetAddtime(t time.Time) *ProductUpdate {
	pu.mutation.SetAddtime(t)
	return pu
}

// SetNillableAddtime sets the "addtime" field if the given value is not nil.
func (pu *ProductUpdate) SetNillableAddtime(t *time.Time) *ProductUpdate {
	if t != nil {
		pu.SetAddtime(*t)
	}
	return pu
}

// SetMtime sets the "mtime" field.
func (pu *ProductUpdate) SetMtime(t time.Time) *ProductUpdate {
	pu.mutation.SetMtime(t)
	return pu
}

// Mutation returns the ProductMutation object of the builder.
func (pu *ProductUpdate) Mutation() *ProductMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProductUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pu.defaults()
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProductUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProductUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProductUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProductUpdate) defaults() {
	if _, ok := pu.mutation.Mtime(); !ok {
		v := product.UpdateDefaultMtime()
		pu.mutation.SetMtime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProductUpdate) check() error {
	if v, ok := pu.mutation.VersionId(); ok {
		if err := product.VersionIdValidator(v); err != nil {
			return &ValidationError{Name: "versionId", err: fmt.Errorf("ent: validator failed for field \"versionId\": %w", err)}
		}
	}
	if v, ok := pu.mutation.VersionName(); ok {
		if err := product.VersionNameValidator(v); err != nil {
			return &ValidationError{Name: "versionName", err: fmt.Errorf("ent: validator failed for field \"versionName\": %w", err)}
		}
	}
	if v, ok := pu.mutation.ProductId(); ok {
		if err := product.ProductIdValidator(v); err != nil {
			return &ValidationError{Name: "productId", err: fmt.Errorf("ent: validator failed for field \"productId\": %w", err)}
		}
	}
	if v, ok := pu.mutation.ProductName(); ok {
		if err := product.ProductNameValidator(v); err != nil {
			return &ValidationError{Name: "productName", err: fmt.Errorf("ent: validator failed for field \"productName\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Price(); ok {
		if err := product.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf("ent: validator failed for field \"price\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Attr(); ok {
		if err := product.AttrValidator(v); err != nil {
			return &ValidationError{Name: "attr", err: fmt.Errorf("ent: validator failed for field \"attr\": %w", err)}
		}
	}
	if v, ok := pu.mutation.ProductDesc(); ok {
		if err := product.ProductDescValidator(v); err != nil {
			return &ValidationError{Name: "productDesc", err: fmt.Errorf("ent: validator failed for field \"productDesc\": %w", err)}
		}
	}
	return nil
}

func (pu *ProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   product.Table,
			Columns: product.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: product.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.VersionId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: product.FieldVersionId,
		})
	}
	if value, ok := pu.mutation.AddedVersionId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: product.FieldVersionId,
		})
	}
	if value, ok := pu.mutation.VersionName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldVersionName,
		})
	}
	if value, ok := pu.mutation.ProductId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: product.FieldProductId,
		})
	}
	if value, ok := pu.mutation.AddedProductId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: product.FieldProductId,
		})
	}
	if value, ok := pu.mutation.ProductName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldProductName,
		})
	}
	if value, ok := pu.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldPrice,
		})
	}
	if value, ok := pu.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldPrice,
		})
	}
	if value, ok := pu.mutation.Attr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldAttr,
		})
	}
	if value, ok := pu.mutation.ProductDesc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldProductDesc,
		})
	}
	if value, ok := pu.mutation.Addtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldAddtime,
		})
	}
	if value, ok := pu.mutation.Mtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldMtime,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProductUpdateOne is the builder for updating a single Product entity.
type ProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProductMutation
}

// SetVersionId sets the "versionId" field.
func (puo *ProductUpdateOne) SetVersionId(i int64) *ProductUpdateOne {
	puo.mutation.ResetVersionId()
	puo.mutation.SetVersionId(i)
	return puo
}

// SetNillableVersionId sets the "versionId" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableVersionId(i *int64) *ProductUpdateOne {
	if i != nil {
		puo.SetVersionId(*i)
	}
	return puo
}

// AddVersionId adds i to the "versionId" field.
func (puo *ProductUpdateOne) AddVersionId(i int64) *ProductUpdateOne {
	puo.mutation.AddVersionId(i)
	return puo
}

// SetVersionName sets the "versionName" field.
func (puo *ProductUpdateOne) SetVersionName(s string) *ProductUpdateOne {
	puo.mutation.SetVersionName(s)
	return puo
}

// SetNillableVersionName sets the "versionName" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableVersionName(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetVersionName(*s)
	}
	return puo
}

// SetProductId sets the "productId" field.
func (puo *ProductUpdateOne) SetProductId(i int64) *ProductUpdateOne {
	puo.mutation.ResetProductId()
	puo.mutation.SetProductId(i)
	return puo
}

// SetNillableProductId sets the "productId" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableProductId(i *int64) *ProductUpdateOne {
	if i != nil {
		puo.SetProductId(*i)
	}
	return puo
}

// AddProductId adds i to the "productId" field.
func (puo *ProductUpdateOne) AddProductId(i int64) *ProductUpdateOne {
	puo.mutation.AddProductId(i)
	return puo
}

// SetProductName sets the "productName" field.
func (puo *ProductUpdateOne) SetProductName(s string) *ProductUpdateOne {
	puo.mutation.SetProductName(s)
	return puo
}

// SetNillableProductName sets the "productName" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableProductName(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetProductName(*s)
	}
	return puo
}

// SetPrice sets the "price" field.
func (puo *ProductUpdateOne) SetPrice(i int) *ProductUpdateOne {
	puo.mutation.ResetPrice()
	puo.mutation.SetPrice(i)
	return puo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillablePrice(i *int) *ProductUpdateOne {
	if i != nil {
		puo.SetPrice(*i)
	}
	return puo
}

// AddPrice adds i to the "price" field.
func (puo *ProductUpdateOne) AddPrice(i int) *ProductUpdateOne {
	puo.mutation.AddPrice(i)
	return puo
}

// SetAttr sets the "attr" field.
func (puo *ProductUpdateOne) SetAttr(s string) *ProductUpdateOne {
	puo.mutation.SetAttr(s)
	return puo
}

// SetNillableAttr sets the "attr" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableAttr(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetAttr(*s)
	}
	return puo
}

// SetProductDesc sets the "productDesc" field.
func (puo *ProductUpdateOne) SetProductDesc(s string) *ProductUpdateOne {
	puo.mutation.SetProductDesc(s)
	return puo
}

// SetNillableProductDesc sets the "productDesc" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableProductDesc(s *string) *ProductUpdateOne {
	if s != nil {
		puo.SetProductDesc(*s)
	}
	return puo
}

// SetAddtime sets the "addtime" field.
func (puo *ProductUpdateOne) SetAddtime(t time.Time) *ProductUpdateOne {
	puo.mutation.SetAddtime(t)
	return puo
}

// SetNillableAddtime sets the "addtime" field if the given value is not nil.
func (puo *ProductUpdateOne) SetNillableAddtime(t *time.Time) *ProductUpdateOne {
	if t != nil {
		puo.SetAddtime(*t)
	}
	return puo
}

// SetMtime sets the "mtime" field.
func (puo *ProductUpdateOne) SetMtime(t time.Time) *ProductUpdateOne {
	puo.mutation.SetMtime(t)
	return puo
}

// Mutation returns the ProductMutation object of the builder.
func (puo *ProductUpdateOne) Mutation() *ProductMutation {
	return puo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProductUpdateOne) Select(field string, fields ...string) *ProductUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Product entity.
func (puo *ProductUpdateOne) Save(ctx context.Context) (*Product, error) {
	var (
		err  error
		node *Product
	)
	puo.defaults()
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProductMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProductUpdateOne) SaveX(ctx context.Context) *Product {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProductUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProductUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProductUpdateOne) defaults() {
	if _, ok := puo.mutation.Mtime(); !ok {
		v := product.UpdateDefaultMtime()
		puo.mutation.SetMtime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProductUpdateOne) check() error {
	if v, ok := puo.mutation.VersionId(); ok {
		if err := product.VersionIdValidator(v); err != nil {
			return &ValidationError{Name: "versionId", err: fmt.Errorf("ent: validator failed for field \"versionId\": %w", err)}
		}
	}
	if v, ok := puo.mutation.VersionName(); ok {
		if err := product.VersionNameValidator(v); err != nil {
			return &ValidationError{Name: "versionName", err: fmt.Errorf("ent: validator failed for field \"versionName\": %w", err)}
		}
	}
	if v, ok := puo.mutation.ProductId(); ok {
		if err := product.ProductIdValidator(v); err != nil {
			return &ValidationError{Name: "productId", err: fmt.Errorf("ent: validator failed for field \"productId\": %w", err)}
		}
	}
	if v, ok := puo.mutation.ProductName(); ok {
		if err := product.ProductNameValidator(v); err != nil {
			return &ValidationError{Name: "productName", err: fmt.Errorf("ent: validator failed for field \"productName\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Price(); ok {
		if err := product.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf("ent: validator failed for field \"price\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Attr(); ok {
		if err := product.AttrValidator(v); err != nil {
			return &ValidationError{Name: "attr", err: fmt.Errorf("ent: validator failed for field \"attr\": %w", err)}
		}
	}
	if v, ok := puo.mutation.ProductDesc(); ok {
		if err := product.ProductDescValidator(v); err != nil {
			return &ValidationError{Name: "productDesc", err: fmt.Errorf("ent: validator failed for field \"productDesc\": %w", err)}
		}
	}
	return nil
}

func (puo *ProductUpdateOne) sqlSave(ctx context.Context) (_node *Product, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   product.Table,
			Columns: product.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: product.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Product.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, product.FieldID)
		for _, f := range fields {
			if !product.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != product.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.VersionId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: product.FieldVersionId,
		})
	}
	if value, ok := puo.mutation.AddedVersionId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: product.FieldVersionId,
		})
	}
	if value, ok := puo.mutation.VersionName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldVersionName,
		})
	}
	if value, ok := puo.mutation.ProductId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: product.FieldProductId,
		})
	}
	if value, ok := puo.mutation.AddedProductId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: product.FieldProductId,
		})
	}
	if value, ok := puo.mutation.ProductName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldProductName,
		})
	}
	if value, ok := puo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldPrice,
		})
	}
	if value, ok := puo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: product.FieldPrice,
		})
	}
	if value, ok := puo.mutation.Attr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldAttr,
		})
	}
	if value, ok := puo.mutation.ProductDesc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: product.FieldProductDesc,
		})
	}
	if value, ok := puo.mutation.Addtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldAddtime,
		})
	}
	if value, ok := puo.mutation.Mtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: product.FieldMtime,
		})
	}
	_node = &Product{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{product.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
