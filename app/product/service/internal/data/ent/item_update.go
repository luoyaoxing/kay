// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"kay/app/product/service/internal/data/ent/item"
	"kay/app/product/service/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ItemUpdate is the builder for updating Item entities.
type ItemUpdate struct {
	config
	hooks    []Hook
	mutation *ItemMutation
}

// Where adds a new predicate for the ItemUpdate builder.
func (iu *ItemUpdate) Where(ps ...predicate.Item) *ItemUpdate {
	iu.mutation.predicates = append(iu.mutation.predicates, ps...)
	return iu
}

// SetTotalStock sets the "totalStock" field.
func (iu *ItemUpdate) SetTotalStock(i int) *ItemUpdate {
	iu.mutation.ResetTotalStock()
	iu.mutation.SetTotalStock(i)
	return iu
}

// SetNillableTotalStock sets the "totalStock" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableTotalStock(i *int) *ItemUpdate {
	if i != nil {
		iu.SetTotalStock(*i)
	}
	return iu
}

// AddTotalStock adds i to the "totalStock" field.
func (iu *ItemUpdate) AddTotalStock(i int) *ItemUpdate {
	iu.mutation.AddTotalStock(i)
	return iu
}

// SetConsumeStock sets the "consumeStock" field.
func (iu *ItemUpdate) SetConsumeStock(i int) *ItemUpdate {
	iu.mutation.ResetConsumeStock()
	iu.mutation.SetConsumeStock(i)
	return iu
}

// SetNillableConsumeStock sets the "consumeStock" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableConsumeStock(i *int) *ItemUpdate {
	if i != nil {
		iu.SetConsumeStock(*i)
	}
	return iu
}

// AddConsumeStock adds i to the "consumeStock" field.
func (iu *ItemUpdate) AddConsumeStock(i int) *ItemUpdate {
	iu.mutation.AddConsumeStock(i)
	return iu
}

// SetLeftStock sets the "leftStock" field.
func (iu *ItemUpdate) SetLeftStock(i int) *ItemUpdate {
	iu.mutation.ResetLeftStock()
	iu.mutation.SetLeftStock(i)
	return iu
}

// SetNillableLeftStock sets the "leftStock" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableLeftStock(i *int) *ItemUpdate {
	if i != nil {
		iu.SetLeftStock(*i)
	}
	return iu
}

// AddLeftStock adds i to the "leftStock" field.
func (iu *ItemUpdate) AddLeftStock(i int) *ItemUpdate {
	iu.mutation.AddLeftStock(i)
	return iu
}

// SetAddtime sets the "addtime" field.
func (iu *ItemUpdate) SetAddtime(t time.Time) *ItemUpdate {
	iu.mutation.SetAddtime(t)
	return iu
}

// SetNillableAddtime sets the "addtime" field if the given value is not nil.
func (iu *ItemUpdate) SetNillableAddtime(t *time.Time) *ItemUpdate {
	if t != nil {
		iu.SetAddtime(*t)
	}
	return iu
}

// SetMtime sets the "mtime" field.
func (iu *ItemUpdate) SetMtime(t time.Time) *ItemUpdate {
	iu.mutation.SetMtime(t)
	return iu
}

// Mutation returns the ItemMutation object of the builder.
func (iu *ItemUpdate) Mutation() *ItemMutation {
	return iu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *ItemUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	iu.defaults()
	if len(iu.hooks) == 0 {
		affected, err = iu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iu.mutation = mutation
			affected, err = iu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iu.hooks) - 1; i >= 0; i-- {
			mut = iu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iu *ItemUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *ItemUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *ItemUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iu *ItemUpdate) defaults() {
	if _, ok := iu.mutation.Mtime(); !ok {
		v := item.UpdateDefaultMtime()
		iu.mutation.SetMtime(v)
	}
}

func (iu *ItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   item.Table,
			Columns: item.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: item.FieldID,
			},
		},
	}
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.TotalStock(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: item.FieldTotalStock,
		})
	}
	if value, ok := iu.mutation.AddedTotalStock(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: item.FieldTotalStock,
		})
	}
	if value, ok := iu.mutation.ConsumeStock(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: item.FieldConsumeStock,
		})
	}
	if value, ok := iu.mutation.AddedConsumeStock(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: item.FieldConsumeStock,
		})
	}
	if value, ok := iu.mutation.LeftStock(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: item.FieldLeftStock,
		})
	}
	if value, ok := iu.mutation.AddedLeftStock(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: item.FieldLeftStock,
		})
	}
	if value, ok := iu.mutation.Addtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: item.FieldAddtime,
		})
	}
	if value, ok := iu.mutation.Mtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: item.FieldMtime,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{item.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ItemUpdateOne is the builder for updating a single Item entity.
type ItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ItemMutation
}

// SetTotalStock sets the "totalStock" field.
func (iuo *ItemUpdateOne) SetTotalStock(i int) *ItemUpdateOne {
	iuo.mutation.ResetTotalStock()
	iuo.mutation.SetTotalStock(i)
	return iuo
}

// SetNillableTotalStock sets the "totalStock" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableTotalStock(i *int) *ItemUpdateOne {
	if i != nil {
		iuo.SetTotalStock(*i)
	}
	return iuo
}

// AddTotalStock adds i to the "totalStock" field.
func (iuo *ItemUpdateOne) AddTotalStock(i int) *ItemUpdateOne {
	iuo.mutation.AddTotalStock(i)
	return iuo
}

// SetConsumeStock sets the "consumeStock" field.
func (iuo *ItemUpdateOne) SetConsumeStock(i int) *ItemUpdateOne {
	iuo.mutation.ResetConsumeStock()
	iuo.mutation.SetConsumeStock(i)
	return iuo
}

// SetNillableConsumeStock sets the "consumeStock" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableConsumeStock(i *int) *ItemUpdateOne {
	if i != nil {
		iuo.SetConsumeStock(*i)
	}
	return iuo
}

// AddConsumeStock adds i to the "consumeStock" field.
func (iuo *ItemUpdateOne) AddConsumeStock(i int) *ItemUpdateOne {
	iuo.mutation.AddConsumeStock(i)
	return iuo
}

// SetLeftStock sets the "leftStock" field.
func (iuo *ItemUpdateOne) SetLeftStock(i int) *ItemUpdateOne {
	iuo.mutation.ResetLeftStock()
	iuo.mutation.SetLeftStock(i)
	return iuo
}

// SetNillableLeftStock sets the "leftStock" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableLeftStock(i *int) *ItemUpdateOne {
	if i != nil {
		iuo.SetLeftStock(*i)
	}
	return iuo
}

// AddLeftStock adds i to the "leftStock" field.
func (iuo *ItemUpdateOne) AddLeftStock(i int) *ItemUpdateOne {
	iuo.mutation.AddLeftStock(i)
	return iuo
}

// SetAddtime sets the "addtime" field.
func (iuo *ItemUpdateOne) SetAddtime(t time.Time) *ItemUpdateOne {
	iuo.mutation.SetAddtime(t)
	return iuo
}

// SetNillableAddtime sets the "addtime" field if the given value is not nil.
func (iuo *ItemUpdateOne) SetNillableAddtime(t *time.Time) *ItemUpdateOne {
	if t != nil {
		iuo.SetAddtime(*t)
	}
	return iuo
}

// SetMtime sets the "mtime" field.
func (iuo *ItemUpdateOne) SetMtime(t time.Time) *ItemUpdateOne {
	iuo.mutation.SetMtime(t)
	return iuo
}

// Mutation returns the ItemMutation object of the builder.
func (iuo *ItemUpdateOne) Mutation() *ItemMutation {
	return iuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *ItemUpdateOne) Select(field string, fields ...string) *ItemUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Item entity.
func (iuo *ItemUpdateOne) Save(ctx context.Context) (*Item, error) {
	var (
		err  error
		node *Item
	)
	iuo.defaults()
	if len(iuo.hooks) == 0 {
		node, err = iuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iuo.mutation = mutation
			node, err = iuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iuo.hooks) - 1; i >= 0; i-- {
			mut = iuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *ItemUpdateOne) SaveX(ctx context.Context) *Item {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *ItemUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *ItemUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iuo *ItemUpdateOne) defaults() {
	if _, ok := iuo.mutation.Mtime(); !ok {
		v := item.UpdateDefaultMtime()
		iuo.mutation.SetMtime(v)
	}
}

func (iuo *ItemUpdateOne) sqlSave(ctx context.Context) (_node *Item, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   item.Table,
			Columns: item.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: item.FieldID,
			},
		},
	}
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Item.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, item.FieldID)
		for _, f := range fields {
			if !item.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != item.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.TotalStock(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: item.FieldTotalStock,
		})
	}
	if value, ok := iuo.mutation.AddedTotalStock(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: item.FieldTotalStock,
		})
	}
	if value, ok := iuo.mutation.ConsumeStock(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: item.FieldConsumeStock,
		})
	}
	if value, ok := iuo.mutation.AddedConsumeStock(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: item.FieldConsumeStock,
		})
	}
	if value, ok := iuo.mutation.LeftStock(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: item.FieldLeftStock,
		})
	}
	if value, ok := iuo.mutation.AddedLeftStock(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: item.FieldLeftStock,
		})
	}
	if value, ok := iuo.mutation.Addtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: item.FieldAddtime,
		})
	}
	if value, ok := iuo.mutation.Mtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: item.FieldMtime,
		})
	}
	_node = &Item{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{item.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
