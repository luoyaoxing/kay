// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"kay/app/product/service/internal/data/ent/predicate"
	"kay/app/product/service/internal/data/ent/product"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeProduct = "Product"
)

// ProductMutation represents an operation that mutates the Product nodes in the graph.
type ProductMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	versionId     *int64
	addversionId  *int64
	versionName   *string
	productId     *int64
	addproductId  *int64
	productName   *string
	price         *int
	addprice      *int
	attr          *string
	productDesc   *string
	addtime       *time.Time
	mtime         *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Product, error)
	predicates    []predicate.Product
}

var _ ent.Mutation = (*ProductMutation)(nil)

// productOption allows management of the mutation configuration using functional options.
type productOption func(*ProductMutation)

// newProductMutation creates new mutation for the Product entity.
func newProductMutation(c config, op Op, opts ...productOption) *ProductMutation {
	m := &ProductMutation{
		config:        c,
		op:            op,
		typ:           TypeProduct,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProductID sets the ID field of the mutation.
func withProductID(id int64) productOption {
	return func(m *ProductMutation) {
		var (
			err   error
			once  sync.Once
			value *Product
		)
		m.oldValue = func(ctx context.Context) (*Product, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Product.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProduct sets the old Product of the mutation.
func withProduct(node *Product) productOption {
	return func(m *ProductMutation) {
		m.oldValue = func(context.Context) (*Product, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProductMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProductMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Product entities.
func (m *ProductMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ProductMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetVersionId sets the "versionId" field.
func (m *ProductMutation) SetVersionId(i int64) {
	m.versionId = &i
	m.addversionId = nil
}

// VersionId returns the value of the "versionId" field in the mutation.
func (m *ProductMutation) VersionId() (r int64, exists bool) {
	v := m.versionId
	if v == nil {
		return
	}
	return *v, true
}

// OldVersionId returns the old "versionId" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldVersionId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldVersionId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldVersionId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersionId: %w", err)
	}
	return oldValue.VersionId, nil
}

// AddVersionId adds i to the "versionId" field.
func (m *ProductMutation) AddVersionId(i int64) {
	if m.addversionId != nil {
		*m.addversionId += i
	} else {
		m.addversionId = &i
	}
}

// AddedVersionId returns the value that was added to the "versionId" field in this mutation.
func (m *ProductMutation) AddedVersionId() (r int64, exists bool) {
	v := m.addversionId
	if v == nil {
		return
	}
	return *v, true
}

// ResetVersionId resets all changes to the "versionId" field.
func (m *ProductMutation) ResetVersionId() {
	m.versionId = nil
	m.addversionId = nil
}

// SetVersionName sets the "versionName" field.
func (m *ProductMutation) SetVersionName(s string) {
	m.versionName = &s
}

// VersionName returns the value of the "versionName" field in the mutation.
func (m *ProductMutation) VersionName() (r string, exists bool) {
	v := m.versionName
	if v == nil {
		return
	}
	return *v, true
}

// OldVersionName returns the old "versionName" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldVersionName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldVersionName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldVersionName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersionName: %w", err)
	}
	return oldValue.VersionName, nil
}

// ResetVersionName resets all changes to the "versionName" field.
func (m *ProductMutation) ResetVersionName() {
	m.versionName = nil
}

// SetProductId sets the "productId" field.
func (m *ProductMutation) SetProductId(i int64) {
	m.productId = &i
	m.addproductId = nil
}

// ProductId returns the value of the "productId" field in the mutation.
func (m *ProductMutation) ProductId() (r int64, exists bool) {
	v := m.productId
	if v == nil {
		return
	}
	return *v, true
}

// OldProductId returns the old "productId" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldProductId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProductId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProductId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductId: %w", err)
	}
	return oldValue.ProductId, nil
}

// AddProductId adds i to the "productId" field.
func (m *ProductMutation) AddProductId(i int64) {
	if m.addproductId != nil {
		*m.addproductId += i
	} else {
		m.addproductId = &i
	}
}

// AddedProductId returns the value that was added to the "productId" field in this mutation.
func (m *ProductMutation) AddedProductId() (r int64, exists bool) {
	v := m.addproductId
	if v == nil {
		return
	}
	return *v, true
}

// ResetProductId resets all changes to the "productId" field.
func (m *ProductMutation) ResetProductId() {
	m.productId = nil
	m.addproductId = nil
}

// SetProductName sets the "productName" field.
func (m *ProductMutation) SetProductName(s string) {
	m.productName = &s
}

// ProductName returns the value of the "productName" field in the mutation.
func (m *ProductMutation) ProductName() (r string, exists bool) {
	v := m.productName
	if v == nil {
		return
	}
	return *v, true
}

// OldProductName returns the old "productName" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldProductName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProductName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProductName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductName: %w", err)
	}
	return oldValue.ProductName, nil
}

// ResetProductName resets all changes to the "productName" field.
func (m *ProductMutation) ResetProductName() {
	m.productName = nil
}

// SetPrice sets the "price" field.
func (m *ProductMutation) SetPrice(i int) {
	m.price = &i
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *ProductMutation) Price() (r int, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldPrice(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds i to the "price" field.
func (m *ProductMutation) AddPrice(i int) {
	if m.addprice != nil {
		*m.addprice += i
	} else {
		m.addprice = &i
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *ProductMutation) AddedPrice() (r int, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *ProductMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetAttr sets the "attr" field.
func (m *ProductMutation) SetAttr(s string) {
	m.attr = &s
}

// Attr returns the value of the "attr" field in the mutation.
func (m *ProductMutation) Attr() (r string, exists bool) {
	v := m.attr
	if v == nil {
		return
	}
	return *v, true
}

// OldAttr returns the old "attr" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldAttr(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAttr is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAttr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAttr: %w", err)
	}
	return oldValue.Attr, nil
}

// ResetAttr resets all changes to the "attr" field.
func (m *ProductMutation) ResetAttr() {
	m.attr = nil
}

// SetProductDesc sets the "productDesc" field.
func (m *ProductMutation) SetProductDesc(s string) {
	m.productDesc = &s
}

// ProductDesc returns the value of the "productDesc" field in the mutation.
func (m *ProductMutation) ProductDesc() (r string, exists bool) {
	v := m.productDesc
	if v == nil {
		return
	}
	return *v, true
}

// OldProductDesc returns the old "productDesc" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldProductDesc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProductDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProductDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductDesc: %w", err)
	}
	return oldValue.ProductDesc, nil
}

// ResetProductDesc resets all changes to the "productDesc" field.
func (m *ProductMutation) ResetProductDesc() {
	m.productDesc = nil
}

// SetAddtime sets the "addtime" field.
func (m *ProductMutation) SetAddtime(t time.Time) {
	m.addtime = &t
}

// Addtime returns the value of the "addtime" field in the mutation.
func (m *ProductMutation) Addtime() (r time.Time, exists bool) {
	v := m.addtime
	if v == nil {
		return
	}
	return *v, true
}

// OldAddtime returns the old "addtime" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldAddtime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAddtime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAddtime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddtime: %w", err)
	}
	return oldValue.Addtime, nil
}

// ResetAddtime resets all changes to the "addtime" field.
func (m *ProductMutation) ResetAddtime() {
	m.addtime = nil
}

// SetMtime sets the "mtime" field.
func (m *ProductMutation) SetMtime(t time.Time) {
	m.mtime = &t
}

// Mtime returns the value of the "mtime" field in the mutation.
func (m *ProductMutation) Mtime() (r time.Time, exists bool) {
	v := m.mtime
	if v == nil {
		return
	}
	return *v, true
}

// OldMtime returns the old "mtime" field's value of the Product entity.
// If the Product object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProductMutation) OldMtime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMtime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMtime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMtime: %w", err)
	}
	return oldValue.Mtime, nil
}

// ResetMtime resets all changes to the "mtime" field.
func (m *ProductMutation) ResetMtime() {
	m.mtime = nil
}

// Op returns the operation name.
func (m *ProductMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Product).
func (m *ProductMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProductMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.versionId != nil {
		fields = append(fields, product.FieldVersionId)
	}
	if m.versionName != nil {
		fields = append(fields, product.FieldVersionName)
	}
	if m.productId != nil {
		fields = append(fields, product.FieldProductId)
	}
	if m.productName != nil {
		fields = append(fields, product.FieldProductName)
	}
	if m.price != nil {
		fields = append(fields, product.FieldPrice)
	}
	if m.attr != nil {
		fields = append(fields, product.FieldAttr)
	}
	if m.productDesc != nil {
		fields = append(fields, product.FieldProductDesc)
	}
	if m.addtime != nil {
		fields = append(fields, product.FieldAddtime)
	}
	if m.mtime != nil {
		fields = append(fields, product.FieldMtime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProductMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case product.FieldVersionId:
		return m.VersionId()
	case product.FieldVersionName:
		return m.VersionName()
	case product.FieldProductId:
		return m.ProductId()
	case product.FieldProductName:
		return m.ProductName()
	case product.FieldPrice:
		return m.Price()
	case product.FieldAttr:
		return m.Attr()
	case product.FieldProductDesc:
		return m.ProductDesc()
	case product.FieldAddtime:
		return m.Addtime()
	case product.FieldMtime:
		return m.Mtime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProductMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case product.FieldVersionId:
		return m.OldVersionId(ctx)
	case product.FieldVersionName:
		return m.OldVersionName(ctx)
	case product.FieldProductId:
		return m.OldProductId(ctx)
	case product.FieldProductName:
		return m.OldProductName(ctx)
	case product.FieldPrice:
		return m.OldPrice(ctx)
	case product.FieldAttr:
		return m.OldAttr(ctx)
	case product.FieldProductDesc:
		return m.OldProductDesc(ctx)
	case product.FieldAddtime:
		return m.OldAddtime(ctx)
	case product.FieldMtime:
		return m.OldMtime(ctx)
	}
	return nil, fmt.Errorf("unknown Product field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProductMutation) SetField(name string, value ent.Value) error {
	switch name {
	case product.FieldVersionId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersionId(v)
		return nil
	case product.FieldVersionName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersionName(v)
		return nil
	case product.FieldProductId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductId(v)
		return nil
	case product.FieldProductName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductName(v)
		return nil
	case product.FieldPrice:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case product.FieldAttr:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAttr(v)
		return nil
	case product.FieldProductDesc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductDesc(v)
		return nil
	case product.FieldAddtime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddtime(v)
		return nil
	case product.FieldMtime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMtime(v)
		return nil
	}
	return fmt.Errorf("unknown Product field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProductMutation) AddedFields() []string {
	var fields []string
	if m.addversionId != nil {
		fields = append(fields, product.FieldVersionId)
	}
	if m.addproductId != nil {
		fields = append(fields, product.FieldProductId)
	}
	if m.addprice != nil {
		fields = append(fields, product.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProductMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case product.FieldVersionId:
		return m.AddedVersionId()
	case product.FieldProductId:
		return m.AddedProductId()
	case product.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProductMutation) AddField(name string, value ent.Value) error {
	switch name {
	case product.FieldVersionId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVersionId(v)
		return nil
	case product.FieldProductId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProductId(v)
		return nil
	case product.FieldPrice:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown Product numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProductMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProductMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProductMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Product nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProductMutation) ResetField(name string) error {
	switch name {
	case product.FieldVersionId:
		m.ResetVersionId()
		return nil
	case product.FieldVersionName:
		m.ResetVersionName()
		return nil
	case product.FieldProductId:
		m.ResetProductId()
		return nil
	case product.FieldProductName:
		m.ResetProductName()
		return nil
	case product.FieldPrice:
		m.ResetPrice()
		return nil
	case product.FieldAttr:
		m.ResetAttr()
		return nil
	case product.FieldProductDesc:
		m.ResetProductDesc()
		return nil
	case product.FieldAddtime:
		m.ResetAddtime()
		return nil
	case product.FieldMtime:
		m.ResetMtime()
		return nil
	}
	return fmt.Errorf("unknown Product field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProductMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProductMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProductMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProductMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProductMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProductMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProductMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Product unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProductMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Product edge %s", name)
}
