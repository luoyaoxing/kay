// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kay/app/product/service/internal/data/ent/item"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ItemCreate is the builder for creating a Item entity.
type ItemCreate struct {
	config
	mutation *ItemMutation
	hooks    []Hook
}

// SetTotalStock sets the "totalStock" field.
func (ic *ItemCreate) SetTotalStock(i int) *ItemCreate {
	ic.mutation.SetTotalStock(i)
	return ic
}

// SetNillableTotalStock sets the "totalStock" field if the given value is not nil.
func (ic *ItemCreate) SetNillableTotalStock(i *int) *ItemCreate {
	if i != nil {
		ic.SetTotalStock(*i)
	}
	return ic
}

// SetConsumeStock sets the "consumeStock" field.
func (ic *ItemCreate) SetConsumeStock(i int) *ItemCreate {
	ic.mutation.SetConsumeStock(i)
	return ic
}

// SetNillableConsumeStock sets the "consumeStock" field if the given value is not nil.
func (ic *ItemCreate) SetNillableConsumeStock(i *int) *ItemCreate {
	if i != nil {
		ic.SetConsumeStock(*i)
	}
	return ic
}

// SetLeftStock sets the "leftStock" field.
func (ic *ItemCreate) SetLeftStock(i int) *ItemCreate {
	ic.mutation.SetLeftStock(i)
	return ic
}

// SetNillableLeftStock sets the "leftStock" field if the given value is not nil.
func (ic *ItemCreate) SetNillableLeftStock(i *int) *ItemCreate {
	if i != nil {
		ic.SetLeftStock(*i)
	}
	return ic
}

// SetAddtime sets the "addtime" field.
func (ic *ItemCreate) SetAddtime(t time.Time) *ItemCreate {
	ic.mutation.SetAddtime(t)
	return ic
}

// SetNillableAddtime sets the "addtime" field if the given value is not nil.
func (ic *ItemCreate) SetNillableAddtime(t *time.Time) *ItemCreate {
	if t != nil {
		ic.SetAddtime(*t)
	}
	return ic
}

// SetMtime sets the "mtime" field.
func (ic *ItemCreate) SetMtime(t time.Time) *ItemCreate {
	ic.mutation.SetMtime(t)
	return ic
}

// SetNillableMtime sets the "mtime" field if the given value is not nil.
func (ic *ItemCreate) SetNillableMtime(t *time.Time) *ItemCreate {
	if t != nil {
		ic.SetMtime(*t)
	}
	return ic
}

// SetID sets the "id" field.
func (ic *ItemCreate) SetID(i int64) *ItemCreate {
	ic.mutation.SetID(i)
	return ic
}

// Mutation returns the ItemMutation object of the builder.
func (ic *ItemCreate) Mutation() *ItemMutation {
	return ic.mutation
}

// Save creates the Item in the database.
func (ic *ItemCreate) Save(ctx context.Context) (*Item, error) {
	var (
		err  error
		node *Item
	)
	ic.defaults()
	if len(ic.hooks) == 0 {
		if err = ic.check(); err != nil {
			return nil, err
		}
		node, err = ic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ic.check(); err != nil {
				return nil, err
			}
			ic.mutation = mutation
			node, err = ic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ic.hooks) - 1; i >= 0; i-- {
			mut = ic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ic *ItemCreate) SaveX(ctx context.Context) *Item {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ic *ItemCreate) defaults() {
	if _, ok := ic.mutation.TotalStock(); !ok {
		v := item.DefaultTotalStock
		ic.mutation.SetTotalStock(v)
	}
	if _, ok := ic.mutation.ConsumeStock(); !ok {
		v := item.DefaultConsumeStock
		ic.mutation.SetConsumeStock(v)
	}
	if _, ok := ic.mutation.LeftStock(); !ok {
		v := item.DefaultLeftStock
		ic.mutation.SetLeftStock(v)
	}
	if _, ok := ic.mutation.Addtime(); !ok {
		v := item.DefaultAddtime()
		ic.mutation.SetAddtime(v)
	}
	if _, ok := ic.mutation.Mtime(); !ok {
		v := item.DefaultMtime()
		ic.mutation.SetMtime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *ItemCreate) check() error {
	if _, ok := ic.mutation.TotalStock(); !ok {
		return &ValidationError{Name: "totalStock", err: errors.New("ent: missing required field \"totalStock\"")}
	}
	if v, ok := ic.mutation.TotalStock(); ok {
		if err := item.TotalStockValidator(v); err != nil {
			return &ValidationError{Name: "totalStock", err: fmt.Errorf("ent: validator failed for field \"totalStock\": %w", err)}
		}
	}
	if _, ok := ic.mutation.ConsumeStock(); !ok {
		return &ValidationError{Name: "consumeStock", err: errors.New("ent: missing required field \"consumeStock\"")}
	}
	if v, ok := ic.mutation.ConsumeStock(); ok {
		if err := item.ConsumeStockValidator(v); err != nil {
			return &ValidationError{Name: "consumeStock", err: fmt.Errorf("ent: validator failed for field \"consumeStock\": %w", err)}
		}
	}
	if _, ok := ic.mutation.LeftStock(); !ok {
		return &ValidationError{Name: "leftStock", err: errors.New("ent: missing required field \"leftStock\"")}
	}
	if v, ok := ic.mutation.LeftStock(); ok {
		if err := item.LeftStockValidator(v); err != nil {
			return &ValidationError{Name: "leftStock", err: fmt.Errorf("ent: validator failed for field \"leftStock\": %w", err)}
		}
	}
	if _, ok := ic.mutation.Addtime(); !ok {
		return &ValidationError{Name: "addtime", err: errors.New("ent: missing required field \"addtime\"")}
	}
	if _, ok := ic.mutation.Mtime(); !ok {
		return &ValidationError{Name: "mtime", err: errors.New("ent: missing required field \"mtime\"")}
	}
	if v, ok := ic.mutation.ID(); ok {
		if err := item.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf("ent: validator failed for field \"id\": %w", err)}
		}
	}
	return nil
}

func (ic *ItemCreate) sqlSave(ctx context.Context) (*Item, error) {
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (ic *ItemCreate) createSpec() (*Item, *sqlgraph.CreateSpec) {
	var (
		_node = &Item{config: ic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: item.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: item.FieldID,
			},
		}
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ic.mutation.TotalStock(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: item.FieldTotalStock,
		})
		_node.TotalStock = value
	}
	if value, ok := ic.mutation.ConsumeStock(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: item.FieldConsumeStock,
		})
		_node.ConsumeStock = value
	}
	if value, ok := ic.mutation.LeftStock(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: item.FieldLeftStock,
		})
		_node.LeftStock = value
	}
	if value, ok := ic.mutation.Addtime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: item.FieldAddtime,
		})
		_node.Addtime = value
	}
	if value, ok := ic.mutation.Mtime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: item.FieldMtime,
		})
		_node.Mtime = value
	}
	return _node, _spec
}

// ItemCreateBulk is the builder for creating many Item entities in bulk.
type ItemCreateBulk struct {
	config
	builders []*ItemCreate
}

// Save creates the Item entities in the database.
func (icb *ItemCreateBulk) Save(ctx context.Context) ([]*Item, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Item, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *ItemCreateBulk) SaveX(ctx context.Context) []*Item {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
