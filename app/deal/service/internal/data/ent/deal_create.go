// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kay/app/deal/service/internal/data/ent/deal"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DealCreate is the builder for creating a Deal entity.
type DealCreate struct {
	config
	mutation *DealMutation
	hooks    []Hook
}

// SetSkuId sets the "skuId" field.
func (dc *DealCreate) SetSkuId(i int64) *DealCreate {
	dc.mutation.SetSkuId(i)
	return dc
}

// SetNillableSkuId sets the "skuId" field if the given value is not nil.
func (dc *DealCreate) SetNillableSkuId(i *int64) *DealCreate {
	if i != nil {
		dc.SetSkuId(*i)
	}
	return dc
}

// SetProductId sets the "productId" field.
func (dc *DealCreate) SetProductId(i int64) *DealCreate {
	dc.mutation.SetProductId(i)
	return dc
}

// SetNillableProductId sets the "productId" field if the given value is not nil.
func (dc *DealCreate) SetNillableProductId(i *int64) *DealCreate {
	if i != nil {
		dc.SetProductId(*i)
	}
	return dc
}

// SetProductName sets the "productName" field.
func (dc *DealCreate) SetProductName(s string) *DealCreate {
	dc.mutation.SetProductName(s)
	return dc
}

// SetNillableProductName sets the "productName" field if the given value is not nil.
func (dc *DealCreate) SetNillableProductName(s *string) *DealCreate {
	if s != nil {
		dc.SetProductName(*s)
	}
	return dc
}

// SetUID sets the "uid" field.
func (dc *DealCreate) SetUID(i int64) *DealCreate {
	dc.mutation.SetUID(i)
	return dc
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (dc *DealCreate) SetNillableUID(i *int64) *DealCreate {
	if i != nil {
		dc.SetUID(*i)
	}
	return dc
}

// SetCustomName sets the "customName" field.
func (dc *DealCreate) SetCustomName(s string) *DealCreate {
	dc.mutation.SetCustomName(s)
	return dc
}

// SetNillableCustomName sets the "customName" field if the given value is not nil.
func (dc *DealCreate) SetNillableCustomName(s *string) *DealCreate {
	if s != nil {
		dc.SetCustomName(*s)
	}
	return dc
}

// SetPhone sets the "phone" field.
func (dc *DealCreate) SetPhone(s string) *DealCreate {
	dc.mutation.SetPhone(s)
	return dc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (dc *DealCreate) SetNillablePhone(s *string) *DealCreate {
	if s != nil {
		dc.SetPhone(*s)
	}
	return dc
}

// SetPrice sets the "price" field.
func (dc *DealCreate) SetPrice(i int) *DealCreate {
	dc.mutation.SetPrice(i)
	return dc
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (dc *DealCreate) SetNillablePrice(i *int) *DealCreate {
	if i != nil {
		dc.SetPrice(*i)
	}
	return dc
}

// SetAddtime sets the "addtime" field.
func (dc *DealCreate) SetAddtime(t time.Time) *DealCreate {
	dc.mutation.SetAddtime(t)
	return dc
}

// SetNillableAddtime sets the "addtime" field if the given value is not nil.
func (dc *DealCreate) SetNillableAddtime(t *time.Time) *DealCreate {
	if t != nil {
		dc.SetAddtime(*t)
	}
	return dc
}

// SetMtime sets the "mtime" field.
func (dc *DealCreate) SetMtime(t time.Time) *DealCreate {
	dc.mutation.SetMtime(t)
	return dc
}

// SetNillableMtime sets the "mtime" field if the given value is not nil.
func (dc *DealCreate) SetNillableMtime(t *time.Time) *DealCreate {
	if t != nil {
		dc.SetMtime(*t)
	}
	return dc
}

// SetID sets the "id" field.
func (dc *DealCreate) SetID(i int64) *DealCreate {
	dc.mutation.SetID(i)
	return dc
}

// Mutation returns the DealMutation object of the builder.
func (dc *DealCreate) Mutation() *DealMutation {
	return dc.mutation
}

// Save creates the Deal in the database.
func (dc *DealCreate) Save(ctx context.Context) (*Deal, error) {
	var (
		err  error
		node *Deal
	)
	dc.defaults()
	if len(dc.hooks) == 0 {
		if err = dc.check(); err != nil {
			return nil, err
		}
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DealMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dc.check(); err != nil {
				return nil, err
			}
			dc.mutation = mutation
			node, err = dc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			mut = dc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DealCreate) SaveX(ctx context.Context) *Deal {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (dc *DealCreate) defaults() {
	if _, ok := dc.mutation.SkuId(); !ok {
		v := deal.DefaultSkuId
		dc.mutation.SetSkuId(v)
	}
	if _, ok := dc.mutation.ProductId(); !ok {
		v := deal.DefaultProductId
		dc.mutation.SetProductId(v)
	}
	if _, ok := dc.mutation.ProductName(); !ok {
		v := deal.DefaultProductName
		dc.mutation.SetProductName(v)
	}
	if _, ok := dc.mutation.UID(); !ok {
		v := deal.DefaultUID
		dc.mutation.SetUID(v)
	}
	if _, ok := dc.mutation.CustomName(); !ok {
		v := deal.DefaultCustomName
		dc.mutation.SetCustomName(v)
	}
	if _, ok := dc.mutation.Phone(); !ok {
		v := deal.DefaultPhone
		dc.mutation.SetPhone(v)
	}
	if _, ok := dc.mutation.Price(); !ok {
		v := deal.DefaultPrice
		dc.mutation.SetPrice(v)
	}
	if _, ok := dc.mutation.Addtime(); !ok {
		v := deal.DefaultAddtime()
		dc.mutation.SetAddtime(v)
	}
	if _, ok := dc.mutation.Mtime(); !ok {
		v := deal.DefaultMtime()
		dc.mutation.SetMtime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DealCreate) check() error {
	if _, ok := dc.mutation.SkuId(); !ok {
		return &ValidationError{Name: "skuId", err: errors.New("ent: missing required field \"skuId\"")}
	}
	if v, ok := dc.mutation.SkuId(); ok {
		if err := deal.SkuIdValidator(v); err != nil {
			return &ValidationError{Name: "skuId", err: fmt.Errorf("ent: validator failed for field \"skuId\": %w", err)}
		}
	}
	if _, ok := dc.mutation.ProductId(); !ok {
		return &ValidationError{Name: "productId", err: errors.New("ent: missing required field \"productId\"")}
	}
	if v, ok := dc.mutation.ProductId(); ok {
		if err := deal.ProductIdValidator(v); err != nil {
			return &ValidationError{Name: "productId", err: fmt.Errorf("ent: validator failed for field \"productId\": %w", err)}
		}
	}
	if _, ok := dc.mutation.ProductName(); !ok {
		return &ValidationError{Name: "productName", err: errors.New("ent: missing required field \"productName\"")}
	}
	if v, ok := dc.mutation.ProductName(); ok {
		if err := deal.ProductNameValidator(v); err != nil {
			return &ValidationError{Name: "productName", err: fmt.Errorf("ent: validator failed for field \"productName\": %w", err)}
		}
	}
	if _, ok := dc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New("ent: missing required field \"uid\"")}
	}
	if v, ok := dc.mutation.UID(); ok {
		if err := deal.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf("ent: validator failed for field \"uid\": %w", err)}
		}
	}
	if _, ok := dc.mutation.CustomName(); !ok {
		return &ValidationError{Name: "customName", err: errors.New("ent: missing required field \"customName\"")}
	}
	if v, ok := dc.mutation.CustomName(); ok {
		if err := deal.CustomNameValidator(v); err != nil {
			return &ValidationError{Name: "customName", err: fmt.Errorf("ent: validator failed for field \"customName\": %w", err)}
		}
	}
	if _, ok := dc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New("ent: missing required field \"phone\"")}
	}
	if v, ok := dc.mutation.Phone(); ok {
		if err := deal.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf("ent: validator failed for field \"phone\": %w", err)}
		}
	}
	if _, ok := dc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New("ent: missing required field \"price\"")}
	}
	if v, ok := dc.mutation.Price(); ok {
		if err := deal.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf("ent: validator failed for field \"price\": %w", err)}
		}
	}
	if _, ok := dc.mutation.Addtime(); !ok {
		return &ValidationError{Name: "addtime", err: errors.New("ent: missing required field \"addtime\"")}
	}
	if _, ok := dc.mutation.Mtime(); !ok {
		return &ValidationError{Name: "mtime", err: errors.New("ent: missing required field \"mtime\"")}
	}
	if v, ok := dc.mutation.ID(); ok {
		if err := deal.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf("ent: validator failed for field \"id\": %w", err)}
		}
	}
	return nil
}

func (dc *DealCreate) sqlSave(ctx context.Context) (*Deal, error) {
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (dc *DealCreate) createSpec() (*Deal, *sqlgraph.CreateSpec) {
	var (
		_node = &Deal{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: deal.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: deal.FieldID,
			},
		}
	)
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.SkuId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deal.FieldSkuId,
		})
		_node.SkuId = value
	}
	if value, ok := dc.mutation.ProductId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deal.FieldProductId,
		})
		_node.ProductId = value
	}
	if value, ok := dc.mutation.ProductName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deal.FieldProductName,
		})
		_node.ProductName = value
	}
	if value, ok := dc.mutation.UID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deal.FieldUID,
		})
		_node.UID = value
	}
	if value, ok := dc.mutation.CustomName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deal.FieldCustomName,
		})
		_node.CustomName = value
	}
	if value, ok := dc.mutation.Phone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deal.FieldPhone,
		})
		_node.Phone = value
	}
	if value, ok := dc.mutation.Price(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deal.FieldPrice,
		})
		_node.Price = value
	}
	if value, ok := dc.mutation.Addtime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deal.FieldAddtime,
		})
		_node.Addtime = value
	}
	if value, ok := dc.mutation.Mtime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deal.FieldMtime,
		})
		_node.Mtime = value
	}
	return _node, _spec
}

// DealCreateBulk is the builder for creating many Deal entities in bulk.
type DealCreateBulk struct {
	config
	builders []*DealCreate
}

// Save creates the Deal entities in the database.
func (dcb *DealCreateBulk) Save(ctx context.Context) ([]*Deal, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Deal, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DealMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				if nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DealCreateBulk) SaveX(ctx context.Context) []*Deal {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
