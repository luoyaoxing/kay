// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"kay/app/deal/service/internal/data/ent/deal"
	"kay/app/deal/service/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DealUpdate is the builder for updating Deal entities.
type DealUpdate struct {
	config
	hooks    []Hook
	mutation *DealMutation
}

// Where adds a new predicate for the DealUpdate builder.
func (du *DealUpdate) Where(ps ...predicate.Deal) *DealUpdate {
	du.mutation.predicates = append(du.mutation.predicates, ps...)
	return du
}

// SetSkuId sets the "skuId" field.
func (du *DealUpdate) SetSkuId(i int64) *DealUpdate {
	du.mutation.ResetSkuId()
	du.mutation.SetSkuId(i)
	return du
}

// SetNillableSkuId sets the "skuId" field if the given value is not nil.
func (du *DealUpdate) SetNillableSkuId(i *int64) *DealUpdate {
	if i != nil {
		du.SetSkuId(*i)
	}
	return du
}

// AddSkuId adds i to the "skuId" field.
func (du *DealUpdate) AddSkuId(i int64) *DealUpdate {
	du.mutation.AddSkuId(i)
	return du
}

// SetProductId sets the "productId" field.
func (du *DealUpdate) SetProductId(i int64) *DealUpdate {
	du.mutation.ResetProductId()
	du.mutation.SetProductId(i)
	return du
}

// SetNillableProductId sets the "productId" field if the given value is not nil.
func (du *DealUpdate) SetNillableProductId(i *int64) *DealUpdate {
	if i != nil {
		du.SetProductId(*i)
	}
	return du
}

// AddProductId adds i to the "productId" field.
func (du *DealUpdate) AddProductId(i int64) *DealUpdate {
	du.mutation.AddProductId(i)
	return du
}

// SetProductName sets the "productName" field.
func (du *DealUpdate) SetProductName(s string) *DealUpdate {
	du.mutation.SetProductName(s)
	return du
}

// SetNillableProductName sets the "productName" field if the given value is not nil.
func (du *DealUpdate) SetNillableProductName(s *string) *DealUpdate {
	if s != nil {
		du.SetProductName(*s)
	}
	return du
}

// SetUID sets the "uid" field.
func (du *DealUpdate) SetUID(i int64) *DealUpdate {
	du.mutation.ResetUID()
	du.mutation.SetUID(i)
	return du
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (du *DealUpdate) SetNillableUID(i *int64) *DealUpdate {
	if i != nil {
		du.SetUID(*i)
	}
	return du
}

// AddUID adds i to the "uid" field.
func (du *DealUpdate) AddUID(i int64) *DealUpdate {
	du.mutation.AddUID(i)
	return du
}

// SetCustomName sets the "customName" field.
func (du *DealUpdate) SetCustomName(s string) *DealUpdate {
	du.mutation.SetCustomName(s)
	return du
}

// SetNillableCustomName sets the "customName" field if the given value is not nil.
func (du *DealUpdate) SetNillableCustomName(s *string) *DealUpdate {
	if s != nil {
		du.SetCustomName(*s)
	}
	return du
}

// SetPhone sets the "phone" field.
func (du *DealUpdate) SetPhone(s string) *DealUpdate {
	du.mutation.SetPhone(s)
	return du
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (du *DealUpdate) SetNillablePhone(s *string) *DealUpdate {
	if s != nil {
		du.SetPhone(*s)
	}
	return du
}

// SetPrice sets the "price" field.
func (du *DealUpdate) SetPrice(i int) *DealUpdate {
	du.mutation.ResetPrice()
	du.mutation.SetPrice(i)
	return du
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (du *DealUpdate) SetNillablePrice(i *int) *DealUpdate {
	if i != nil {
		du.SetPrice(*i)
	}
	return du
}

// AddPrice adds i to the "price" field.
func (du *DealUpdate) AddPrice(i int) *DealUpdate {
	du.mutation.AddPrice(i)
	return du
}

// SetAddtime sets the "addtime" field.
func (du *DealUpdate) SetAddtime(t time.Time) *DealUpdate {
	du.mutation.SetAddtime(t)
	return du
}

// SetNillableAddtime sets the "addtime" field if the given value is not nil.
func (du *DealUpdate) SetNillableAddtime(t *time.Time) *DealUpdate {
	if t != nil {
		du.SetAddtime(*t)
	}
	return du
}

// SetMtime sets the "mtime" field.
func (du *DealUpdate) SetMtime(t time.Time) *DealUpdate {
	du.mutation.SetMtime(t)
	return du
}

// Mutation returns the DealMutation object of the builder.
func (du *DealUpdate) Mutation() *DealMutation {
	return du.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DealUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	du.defaults()
	if len(du.hooks) == 0 {
		if err = du.check(); err != nil {
			return 0, err
		}
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DealMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = du.check(); err != nil {
				return 0, err
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DealUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DealUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DealUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DealUpdate) defaults() {
	if _, ok := du.mutation.Mtime(); !ok {
		v := deal.UpdateDefaultMtime()
		du.mutation.SetMtime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DealUpdate) check() error {
	if v, ok := du.mutation.SkuId(); ok {
		if err := deal.SkuIdValidator(v); err != nil {
			return &ValidationError{Name: "skuId", err: fmt.Errorf("ent: validator failed for field \"skuId\": %w", err)}
		}
	}
	if v, ok := du.mutation.ProductId(); ok {
		if err := deal.ProductIdValidator(v); err != nil {
			return &ValidationError{Name: "productId", err: fmt.Errorf("ent: validator failed for field \"productId\": %w", err)}
		}
	}
	if v, ok := du.mutation.ProductName(); ok {
		if err := deal.ProductNameValidator(v); err != nil {
			return &ValidationError{Name: "productName", err: fmt.Errorf("ent: validator failed for field \"productName\": %w", err)}
		}
	}
	if v, ok := du.mutation.UID(); ok {
		if err := deal.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf("ent: validator failed for field \"uid\": %w", err)}
		}
	}
	if v, ok := du.mutation.CustomName(); ok {
		if err := deal.CustomNameValidator(v); err != nil {
			return &ValidationError{Name: "customName", err: fmt.Errorf("ent: validator failed for field \"customName\": %w", err)}
		}
	}
	if v, ok := du.mutation.Phone(); ok {
		if err := deal.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf("ent: validator failed for field \"phone\": %w", err)}
		}
	}
	if v, ok := du.mutation.Price(); ok {
		if err := deal.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf("ent: validator failed for field \"price\": %w", err)}
		}
	}
	return nil
}

func (du *DealUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deal.Table,
			Columns: deal.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: deal.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.SkuId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deal.FieldSkuId,
		})
	}
	if value, ok := du.mutation.AddedSkuId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deal.FieldSkuId,
		})
	}
	if value, ok := du.mutation.ProductId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deal.FieldProductId,
		})
	}
	if value, ok := du.mutation.AddedProductId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deal.FieldProductId,
		})
	}
	if value, ok := du.mutation.ProductName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deal.FieldProductName,
		})
	}
	if value, ok := du.mutation.UID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deal.FieldUID,
		})
	}
	if value, ok := du.mutation.AddedUID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deal.FieldUID,
		})
	}
	if value, ok := du.mutation.CustomName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deal.FieldCustomName,
		})
	}
	if value, ok := du.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deal.FieldPhone,
		})
	}
	if value, ok := du.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deal.FieldPrice,
		})
	}
	if value, ok := du.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deal.FieldPrice,
		})
	}
	if value, ok := du.mutation.Addtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deal.FieldAddtime,
		})
	}
	if value, ok := du.mutation.Mtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deal.FieldMtime,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deal.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DealUpdateOne is the builder for updating a single Deal entity.
type DealUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DealMutation
}

// SetSkuId sets the "skuId" field.
func (duo *DealUpdateOne) SetSkuId(i int64) *DealUpdateOne {
	duo.mutation.ResetSkuId()
	duo.mutation.SetSkuId(i)
	return duo
}

// SetNillableSkuId sets the "skuId" field if the given value is not nil.
func (duo *DealUpdateOne) SetNillableSkuId(i *int64) *DealUpdateOne {
	if i != nil {
		duo.SetSkuId(*i)
	}
	return duo
}

// AddSkuId adds i to the "skuId" field.
func (duo *DealUpdateOne) AddSkuId(i int64) *DealUpdateOne {
	duo.mutation.AddSkuId(i)
	return duo
}

// SetProductId sets the "productId" field.
func (duo *DealUpdateOne) SetProductId(i int64) *DealUpdateOne {
	duo.mutation.ResetProductId()
	duo.mutation.SetProductId(i)
	return duo
}

// SetNillableProductId sets the "productId" field if the given value is not nil.
func (duo *DealUpdateOne) SetNillableProductId(i *int64) *DealUpdateOne {
	if i != nil {
		duo.SetProductId(*i)
	}
	return duo
}

// AddProductId adds i to the "productId" field.
func (duo *DealUpdateOne) AddProductId(i int64) *DealUpdateOne {
	duo.mutation.AddProductId(i)
	return duo
}

// SetProductName sets the "productName" field.
func (duo *DealUpdateOne) SetProductName(s string) *DealUpdateOne {
	duo.mutation.SetProductName(s)
	return duo
}

// SetNillableProductName sets the "productName" field if the given value is not nil.
func (duo *DealUpdateOne) SetNillableProductName(s *string) *DealUpdateOne {
	if s != nil {
		duo.SetProductName(*s)
	}
	return duo
}

// SetUID sets the "uid" field.
func (duo *DealUpdateOne) SetUID(i int64) *DealUpdateOne {
	duo.mutation.ResetUID()
	duo.mutation.SetUID(i)
	return duo
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (duo *DealUpdateOne) SetNillableUID(i *int64) *DealUpdateOne {
	if i != nil {
		duo.SetUID(*i)
	}
	return duo
}

// AddUID adds i to the "uid" field.
func (duo *DealUpdateOne) AddUID(i int64) *DealUpdateOne {
	duo.mutation.AddUID(i)
	return duo
}

// SetCustomName sets the "customName" field.
func (duo *DealUpdateOne) SetCustomName(s string) *DealUpdateOne {
	duo.mutation.SetCustomName(s)
	return duo
}

// SetNillableCustomName sets the "customName" field if the given value is not nil.
func (duo *DealUpdateOne) SetNillableCustomName(s *string) *DealUpdateOne {
	if s != nil {
		duo.SetCustomName(*s)
	}
	return duo
}

// SetPhone sets the "phone" field.
func (duo *DealUpdateOne) SetPhone(s string) *DealUpdateOne {
	duo.mutation.SetPhone(s)
	return duo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (duo *DealUpdateOne) SetNillablePhone(s *string) *DealUpdateOne {
	if s != nil {
		duo.SetPhone(*s)
	}
	return duo
}

// SetPrice sets the "price" field.
func (duo *DealUpdateOne) SetPrice(i int) *DealUpdateOne {
	duo.mutation.ResetPrice()
	duo.mutation.SetPrice(i)
	return duo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (duo *DealUpdateOne) SetNillablePrice(i *int) *DealUpdateOne {
	if i != nil {
		duo.SetPrice(*i)
	}
	return duo
}

// AddPrice adds i to the "price" field.
func (duo *DealUpdateOne) AddPrice(i int) *DealUpdateOne {
	duo.mutation.AddPrice(i)
	return duo
}

// SetAddtime sets the "addtime" field.
func (duo *DealUpdateOne) SetAddtime(t time.Time) *DealUpdateOne {
	duo.mutation.SetAddtime(t)
	return duo
}

// SetNillableAddtime sets the "addtime" field if the given value is not nil.
func (duo *DealUpdateOne) SetNillableAddtime(t *time.Time) *DealUpdateOne {
	if t != nil {
		duo.SetAddtime(*t)
	}
	return duo
}

// SetMtime sets the "mtime" field.
func (duo *DealUpdateOne) SetMtime(t time.Time) *DealUpdateOne {
	duo.mutation.SetMtime(t)
	return duo
}

// Mutation returns the DealMutation object of the builder.
func (duo *DealUpdateOne) Mutation() *DealMutation {
	return duo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DealUpdateOne) Select(field string, fields ...string) *DealUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Deal entity.
func (duo *DealUpdateOne) Save(ctx context.Context) (*Deal, error) {
	var (
		err  error
		node *Deal
	)
	duo.defaults()
	if len(duo.hooks) == 0 {
		if err = duo.check(); err != nil {
			return nil, err
		}
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DealMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = duo.check(); err != nil {
				return nil, err
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DealUpdateOne) SaveX(ctx context.Context) *Deal {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DealUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DealUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DealUpdateOne) defaults() {
	if _, ok := duo.mutation.Mtime(); !ok {
		v := deal.UpdateDefaultMtime()
		duo.mutation.SetMtime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DealUpdateOne) check() error {
	if v, ok := duo.mutation.SkuId(); ok {
		if err := deal.SkuIdValidator(v); err != nil {
			return &ValidationError{Name: "skuId", err: fmt.Errorf("ent: validator failed for field \"skuId\": %w", err)}
		}
	}
	if v, ok := duo.mutation.ProductId(); ok {
		if err := deal.ProductIdValidator(v); err != nil {
			return &ValidationError{Name: "productId", err: fmt.Errorf("ent: validator failed for field \"productId\": %w", err)}
		}
	}
	if v, ok := duo.mutation.ProductName(); ok {
		if err := deal.ProductNameValidator(v); err != nil {
			return &ValidationError{Name: "productName", err: fmt.Errorf("ent: validator failed for field \"productName\": %w", err)}
		}
	}
	if v, ok := duo.mutation.UID(); ok {
		if err := deal.UIDValidator(v); err != nil {
			return &ValidationError{Name: "uid", err: fmt.Errorf("ent: validator failed for field \"uid\": %w", err)}
		}
	}
	if v, ok := duo.mutation.CustomName(); ok {
		if err := deal.CustomNameValidator(v); err != nil {
			return &ValidationError{Name: "customName", err: fmt.Errorf("ent: validator failed for field \"customName\": %w", err)}
		}
	}
	if v, ok := duo.mutation.Phone(); ok {
		if err := deal.PhoneValidator(v); err != nil {
			return &ValidationError{Name: "phone", err: fmt.Errorf("ent: validator failed for field \"phone\": %w", err)}
		}
	}
	if v, ok := duo.mutation.Price(); ok {
		if err := deal.PriceValidator(v); err != nil {
			return &ValidationError{Name: "price", err: fmt.Errorf("ent: validator failed for field \"price\": %w", err)}
		}
	}
	return nil
}

func (duo *DealUpdateOne) sqlSave(ctx context.Context) (_node *Deal, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deal.Table,
			Columns: deal.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: deal.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Deal.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deal.FieldID)
		for _, f := range fields {
			if !deal.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deal.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.SkuId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deal.FieldSkuId,
		})
	}
	if value, ok := duo.mutation.AddedSkuId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deal.FieldSkuId,
		})
	}
	if value, ok := duo.mutation.ProductId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deal.FieldProductId,
		})
	}
	if value, ok := duo.mutation.AddedProductId(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deal.FieldProductId,
		})
	}
	if value, ok := duo.mutation.ProductName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deal.FieldProductName,
		})
	}
	if value, ok := duo.mutation.UID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deal.FieldUID,
		})
	}
	if value, ok := duo.mutation.AddedUID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: deal.FieldUID,
		})
	}
	if value, ok := duo.mutation.CustomName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deal.FieldCustomName,
		})
	}
	if value, ok := duo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: deal.FieldPhone,
		})
	}
	if value, ok := duo.mutation.Price(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deal.FieldPrice,
		})
	}
	if value, ok := duo.mutation.AddedPrice(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: deal.FieldPrice,
		})
	}
	if value, ok := duo.mutation.Addtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deal.FieldAddtime,
		})
	}
	if value, ok := duo.mutation.Mtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: deal.FieldMtime,
		})
	}
	_node = &Deal{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deal.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
