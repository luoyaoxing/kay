// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"kay/app/deal/service/internal/data/ent/deal"
	"kay/app/deal/service/internal/data/ent/predicate"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDeal = "Deal"
)

// DealMutation represents an operation that mutates the Deal nodes in the graph.
type DealMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	skuId         *int64
	addskuId      *int64
	productId     *int64
	addproductId  *int64
	productName   *string
	uid           *int64
	adduid        *int64
	customName    *string
	phone         *string
	price         *int
	addprice      *int
	addtime       *time.Time
	mtime         *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Deal, error)
	predicates    []predicate.Deal
}

var _ ent.Mutation = (*DealMutation)(nil)

// dealOption allows management of the mutation configuration using functional options.
type dealOption func(*DealMutation)

// newDealMutation creates new mutation for the Deal entity.
func newDealMutation(c config, op Op, opts ...dealOption) *DealMutation {
	m := &DealMutation{
		config:        c,
		op:            op,
		typ:           TypeDeal,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDealID sets the ID field of the mutation.
func withDealID(id int64) dealOption {
	return func(m *DealMutation) {
		var (
			err   error
			once  sync.Once
			value *Deal
		)
		m.oldValue = func(ctx context.Context) (*Deal, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Deal.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDeal sets the old Deal of the mutation.
func withDeal(node *Deal) dealOption {
	return func(m *DealMutation) {
		m.oldValue = func(context.Context) (*Deal, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DealMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DealMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Deal entities.
func (m *DealMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *DealMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetSkuId sets the "skuId" field.
func (m *DealMutation) SetSkuId(i int64) {
	m.skuId = &i
	m.addskuId = nil
}

// SkuId returns the value of the "skuId" field in the mutation.
func (m *DealMutation) SkuId() (r int64, exists bool) {
	v := m.skuId
	if v == nil {
		return
	}
	return *v, true
}

// OldSkuId returns the old "skuId" field's value of the Deal entity.
// If the Deal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DealMutation) OldSkuId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSkuId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSkuId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSkuId: %w", err)
	}
	return oldValue.SkuId, nil
}

// AddSkuId adds i to the "skuId" field.
func (m *DealMutation) AddSkuId(i int64) {
	if m.addskuId != nil {
		*m.addskuId += i
	} else {
		m.addskuId = &i
	}
}

// AddedSkuId returns the value that was added to the "skuId" field in this mutation.
func (m *DealMutation) AddedSkuId() (r int64, exists bool) {
	v := m.addskuId
	if v == nil {
		return
	}
	return *v, true
}

// ResetSkuId resets all changes to the "skuId" field.
func (m *DealMutation) ResetSkuId() {
	m.skuId = nil
	m.addskuId = nil
}

// SetProductId sets the "productId" field.
func (m *DealMutation) SetProductId(i int64) {
	m.productId = &i
	m.addproductId = nil
}

// ProductId returns the value of the "productId" field in the mutation.
func (m *DealMutation) ProductId() (r int64, exists bool) {
	v := m.productId
	if v == nil {
		return
	}
	return *v, true
}

// OldProductId returns the old "productId" field's value of the Deal entity.
// If the Deal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DealMutation) OldProductId(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProductId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProductId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductId: %w", err)
	}
	return oldValue.ProductId, nil
}

// AddProductId adds i to the "productId" field.
func (m *DealMutation) AddProductId(i int64) {
	if m.addproductId != nil {
		*m.addproductId += i
	} else {
		m.addproductId = &i
	}
}

// AddedProductId returns the value that was added to the "productId" field in this mutation.
func (m *DealMutation) AddedProductId() (r int64, exists bool) {
	v := m.addproductId
	if v == nil {
		return
	}
	return *v, true
}

// ResetProductId resets all changes to the "productId" field.
func (m *DealMutation) ResetProductId() {
	m.productId = nil
	m.addproductId = nil
}

// SetProductName sets the "productName" field.
func (m *DealMutation) SetProductName(s string) {
	m.productName = &s
}

// ProductName returns the value of the "productName" field in the mutation.
func (m *DealMutation) ProductName() (r string, exists bool) {
	v := m.productName
	if v == nil {
		return
	}
	return *v, true
}

// OldProductName returns the old "productName" field's value of the Deal entity.
// If the Deal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DealMutation) OldProductName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProductName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProductName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductName: %w", err)
	}
	return oldValue.ProductName, nil
}

// ResetProductName resets all changes to the "productName" field.
func (m *DealMutation) ResetProductName() {
	m.productName = nil
}

// SetUID sets the "uid" field.
func (m *DealMutation) SetUID(i int64) {
	m.uid = &i
	m.adduid = nil
}

// UID returns the value of the "uid" field in the mutation.
func (m *DealMutation) UID() (r int64, exists bool) {
	v := m.uid
	if v == nil {
		return
	}
	return *v, true
}

// OldUID returns the old "uid" field's value of the Deal entity.
// If the Deal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DealMutation) OldUID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUID: %w", err)
	}
	return oldValue.UID, nil
}

// AddUID adds i to the "uid" field.
func (m *DealMutation) AddUID(i int64) {
	if m.adduid != nil {
		*m.adduid += i
	} else {
		m.adduid = &i
	}
}

// AddedUID returns the value that was added to the "uid" field in this mutation.
func (m *DealMutation) AddedUID() (r int64, exists bool) {
	v := m.adduid
	if v == nil {
		return
	}
	return *v, true
}

// ResetUID resets all changes to the "uid" field.
func (m *DealMutation) ResetUID() {
	m.uid = nil
	m.adduid = nil
}

// SetCustomName sets the "customName" field.
func (m *DealMutation) SetCustomName(s string) {
	m.customName = &s
}

// CustomName returns the value of the "customName" field in the mutation.
func (m *DealMutation) CustomName() (r string, exists bool) {
	v := m.customName
	if v == nil {
		return
	}
	return *v, true
}

// OldCustomName returns the old "customName" field's value of the Deal entity.
// If the Deal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DealMutation) OldCustomName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCustomName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCustomName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustomName: %w", err)
	}
	return oldValue.CustomName, nil
}

// ResetCustomName resets all changes to the "customName" field.
func (m *DealMutation) ResetCustomName() {
	m.customName = nil
}

// SetPhone sets the "phone" field.
func (m *DealMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *DealMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the Deal entity.
// If the Deal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DealMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *DealMutation) ResetPhone() {
	m.phone = nil
}

// SetPrice sets the "price" field.
func (m *DealMutation) SetPrice(i int) {
	m.price = &i
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *DealMutation) Price() (r int, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the Deal entity.
// If the Deal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DealMutation) OldPrice(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds i to the "price" field.
func (m *DealMutation) AddPrice(i int) {
	if m.addprice != nil {
		*m.addprice += i
	} else {
		m.addprice = &i
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *DealMutation) AddedPrice() (r int, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *DealMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetAddtime sets the "addtime" field.
func (m *DealMutation) SetAddtime(t time.Time) {
	m.addtime = &t
}

// Addtime returns the value of the "addtime" field in the mutation.
func (m *DealMutation) Addtime() (r time.Time, exists bool) {
	v := m.addtime
	if v == nil {
		return
	}
	return *v, true
}

// OldAddtime returns the old "addtime" field's value of the Deal entity.
// If the Deal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DealMutation) OldAddtime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAddtime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAddtime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddtime: %w", err)
	}
	return oldValue.Addtime, nil
}

// ResetAddtime resets all changes to the "addtime" field.
func (m *DealMutation) ResetAddtime() {
	m.addtime = nil
}

// SetMtime sets the "mtime" field.
func (m *DealMutation) SetMtime(t time.Time) {
	m.mtime = &t
}

// Mtime returns the value of the "mtime" field in the mutation.
func (m *DealMutation) Mtime() (r time.Time, exists bool) {
	v := m.mtime
	if v == nil {
		return
	}
	return *v, true
}

// OldMtime returns the old "mtime" field's value of the Deal entity.
// If the Deal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DealMutation) OldMtime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMtime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMtime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMtime: %w", err)
	}
	return oldValue.Mtime, nil
}

// ResetMtime resets all changes to the "mtime" field.
func (m *DealMutation) ResetMtime() {
	m.mtime = nil
}

// Op returns the operation name.
func (m *DealMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Deal).
func (m *DealMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DealMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.skuId != nil {
		fields = append(fields, deal.FieldSkuId)
	}
	if m.productId != nil {
		fields = append(fields, deal.FieldProductId)
	}
	if m.productName != nil {
		fields = append(fields, deal.FieldProductName)
	}
	if m.uid != nil {
		fields = append(fields, deal.FieldUID)
	}
	if m.customName != nil {
		fields = append(fields, deal.FieldCustomName)
	}
	if m.phone != nil {
		fields = append(fields, deal.FieldPhone)
	}
	if m.price != nil {
		fields = append(fields, deal.FieldPrice)
	}
	if m.addtime != nil {
		fields = append(fields, deal.FieldAddtime)
	}
	if m.mtime != nil {
		fields = append(fields, deal.FieldMtime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DealMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case deal.FieldSkuId:
		return m.SkuId()
	case deal.FieldProductId:
		return m.ProductId()
	case deal.FieldProductName:
		return m.ProductName()
	case deal.FieldUID:
		return m.UID()
	case deal.FieldCustomName:
		return m.CustomName()
	case deal.FieldPhone:
		return m.Phone()
	case deal.FieldPrice:
		return m.Price()
	case deal.FieldAddtime:
		return m.Addtime()
	case deal.FieldMtime:
		return m.Mtime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DealMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case deal.FieldSkuId:
		return m.OldSkuId(ctx)
	case deal.FieldProductId:
		return m.OldProductId(ctx)
	case deal.FieldProductName:
		return m.OldProductName(ctx)
	case deal.FieldUID:
		return m.OldUID(ctx)
	case deal.FieldCustomName:
		return m.OldCustomName(ctx)
	case deal.FieldPhone:
		return m.OldPhone(ctx)
	case deal.FieldPrice:
		return m.OldPrice(ctx)
	case deal.FieldAddtime:
		return m.OldAddtime(ctx)
	case deal.FieldMtime:
		return m.OldMtime(ctx)
	}
	return nil, fmt.Errorf("unknown Deal field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DealMutation) SetField(name string, value ent.Value) error {
	switch name {
	case deal.FieldSkuId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSkuId(v)
		return nil
	case deal.FieldProductId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductId(v)
		return nil
	case deal.FieldProductName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductName(v)
		return nil
	case deal.FieldUID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUID(v)
		return nil
	case deal.FieldCustomName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustomName(v)
		return nil
	case deal.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case deal.FieldPrice:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case deal.FieldAddtime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddtime(v)
		return nil
	case deal.FieldMtime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMtime(v)
		return nil
	}
	return fmt.Errorf("unknown Deal field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DealMutation) AddedFields() []string {
	var fields []string
	if m.addskuId != nil {
		fields = append(fields, deal.FieldSkuId)
	}
	if m.addproductId != nil {
		fields = append(fields, deal.FieldProductId)
	}
	if m.adduid != nil {
		fields = append(fields, deal.FieldUID)
	}
	if m.addprice != nil {
		fields = append(fields, deal.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DealMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case deal.FieldSkuId:
		return m.AddedSkuId()
	case deal.FieldProductId:
		return m.AddedProductId()
	case deal.FieldUID:
		return m.AddedUID()
	case deal.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DealMutation) AddField(name string, value ent.Value) error {
	switch name {
	case deal.FieldSkuId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSkuId(v)
		return nil
	case deal.FieldProductId:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProductId(v)
		return nil
	case deal.FieldUID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUID(v)
		return nil
	case deal.FieldPrice:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown Deal numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DealMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DealMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DealMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Deal nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DealMutation) ResetField(name string) error {
	switch name {
	case deal.FieldSkuId:
		m.ResetSkuId()
		return nil
	case deal.FieldProductId:
		m.ResetProductId()
		return nil
	case deal.FieldProductName:
		m.ResetProductName()
		return nil
	case deal.FieldUID:
		m.ResetUID()
		return nil
	case deal.FieldCustomName:
		m.ResetCustomName()
		return nil
	case deal.FieldPhone:
		m.ResetPhone()
		return nil
	case deal.FieldPrice:
		m.ResetPrice()
		return nil
	case deal.FieldAddtime:
		m.ResetAddtime()
		return nil
	case deal.FieldMtime:
		m.ResetMtime()
		return nil
	}
	return fmt.Errorf("unknown Deal field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DealMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DealMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DealMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DealMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DealMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DealMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DealMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Deal unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DealMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Deal edge %s", name)
}
