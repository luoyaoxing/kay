// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"kay/app/deal/service/internal/data/ent/deal"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Deal is the model entity for the Deal schema.
type Deal struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// SkuId holds the value of the "skuId" field.
	SkuId int64 `json:"skuId,omitempty"`
	// ProductId holds the value of the "productId" field.
	ProductId int64 `json:"productId,omitempty"`
	// ProductName holds the value of the "productName" field.
	ProductName string `json:"productName,omitempty"`
	// UID holds the value of the "uid" field.
	UID int64 `json:"uid,omitempty"`
	// CustomName holds the value of the "customName" field.
	CustomName string `json:"customName,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone string `json:"phone,omitempty"`
	// Price holds the value of the "price" field.
	Price int `json:"price,omitempty"`
	// Addtime holds the value of the "addtime" field.
	Addtime time.Time `json:"addtime,omitempty"`
	// Mtime holds the value of the "mtime" field.
	Mtime time.Time `json:"mtime,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Deal) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case deal.FieldID, deal.FieldSkuId, deal.FieldProductId, deal.FieldUID, deal.FieldPrice:
			values[i] = new(sql.NullInt64)
		case deal.FieldProductName, deal.FieldCustomName, deal.FieldPhone:
			values[i] = new(sql.NullString)
		case deal.FieldAddtime, deal.FieldMtime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Deal", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Deal fields.
func (d *Deal) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deal.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int64(value.Int64)
		case deal.FieldSkuId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field skuId", values[i])
			} else if value.Valid {
				d.SkuId = value.Int64
			}
		case deal.FieldProductId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field productId", values[i])
			} else if value.Valid {
				d.ProductId = value.Int64
			}
		case deal.FieldProductName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field productName", values[i])
			} else if value.Valid {
				d.ProductName = value.String
			}
		case deal.FieldUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				d.UID = value.Int64
			}
		case deal.FieldCustomName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customName", values[i])
			} else if value.Valid {
				d.CustomName = value.String
			}
		case deal.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				d.Phone = value.String
			}
		case deal.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				d.Price = int(value.Int64)
			}
		case deal.FieldAddtime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field addtime", values[i])
			} else if value.Valid {
				d.Addtime = value.Time
			}
		case deal.FieldMtime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field mtime", values[i])
			} else if value.Valid {
				d.Mtime = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Deal.
// Note that you need to call Deal.Unwrap() before calling this method if this Deal
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Deal) Update() *DealUpdateOne {
	return (&DealClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Deal entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Deal) Unwrap() *Deal {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Deal is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Deal) String() string {
	var builder strings.Builder
	builder.WriteString("Deal(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", skuId=")
	builder.WriteString(fmt.Sprintf("%v", d.SkuId))
	builder.WriteString(", productId=")
	builder.WriteString(fmt.Sprintf("%v", d.ProductId))
	builder.WriteString(", productName=")
	builder.WriteString(d.ProductName)
	builder.WriteString(", uid=")
	builder.WriteString(fmt.Sprintf("%v", d.UID))
	builder.WriteString(", customName=")
	builder.WriteString(d.CustomName)
	builder.WriteString(", phone=")
	builder.WriteString(d.Phone)
	builder.WriteString(", price=")
	builder.WriteString(fmt.Sprintf("%v", d.Price))
	builder.WriteString(", addtime=")
	builder.WriteString(d.Addtime.Format(time.ANSIC))
	builder.WriteString(", mtime=")
	builder.WriteString(d.Mtime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Deals is a parsable slice of Deal.
type Deals []*Deal

func (d Deals) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
