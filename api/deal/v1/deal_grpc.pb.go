// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DealClient is the client API for Deal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DealClient interface {
	CreateDeal(ctx context.Context, in *CreateDealRequest, opts ...grpc.CallOption) (*CreateDealReply, error)
	GetDeal(ctx context.Context, in *GetDealRequest, opts ...grpc.CallOption) (*GetDealReply, error)
}

type dealClient struct {
	cc grpc.ClientConnInterface
}

func NewDealClient(cc grpc.ClientConnInterface) DealClient {
	return &dealClient{cc}
}

func (c *dealClient) CreateDeal(ctx context.Context, in *CreateDealRequest, opts ...grpc.CallOption) (*CreateDealReply, error) {
	out := new(CreateDealReply)
	err := c.cc.Invoke(ctx, "/api.deal.v1.Deal/CreateDeal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealClient) GetDeal(ctx context.Context, in *GetDealRequest, opts ...grpc.CallOption) (*GetDealReply, error) {
	out := new(GetDealReply)
	err := c.cc.Invoke(ctx, "/api.deal.v1.Deal/GetDeal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DealServer is the server API for Deal service.
// All implementations must embed UnimplementedDealServer
// for forward compatibility
type DealServer interface {
	CreateDeal(context.Context, *CreateDealRequest) (*CreateDealReply, error)
	GetDeal(context.Context, *GetDealRequest) (*GetDealReply, error)
	mustEmbedUnimplementedDealServer()
}

// UnimplementedDealServer must be embedded to have forward compatible implementations.
type UnimplementedDealServer struct {
}

func (*UnimplementedDealServer) CreateDeal(context.Context, *CreateDealRequest) (*CreateDealReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeal not implemented")
}
func (*UnimplementedDealServer) GetDeal(context.Context, *GetDealRequest) (*GetDealReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeal not implemented")
}
func (*UnimplementedDealServer) mustEmbedUnimplementedDealServer() {}

func RegisterDealServer(s *grpc.Server, srv DealServer) {
	s.RegisterService(&_Deal_serviceDesc, srv)
}

func _Deal_CreateDeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealServer).CreateDeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.deal.v1.Deal/CreateDeal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealServer).CreateDeal(ctx, req.(*CreateDealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deal_GetDeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealServer).GetDeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.deal.v1.Deal/GetDeal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealServer).GetDeal(ctx, req.(*GetDealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Deal_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.deal.v1.Deal",
	HandlerType: (*DealServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDeal",
			Handler:    _Deal_CreateDeal_Handler,
		},
		{
			MethodName: "GetDeal",
			Handler:    _Deal_GetDeal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deal.proto",
}
