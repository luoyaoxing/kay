// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// KvstoreClient is the client API for Kvstore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KvstoreClient interface {
	PutKvstore(ctx context.Context, in *PutKvstoreRequest, opts ...grpc.CallOption) (*PutKvstoreReply, error)
	GetKvstore(ctx context.Context, in *GetKvstoreRequest, opts ...grpc.CallOption) (*GetKvstoreReply, error)
}

type kvstoreClient struct {
	cc grpc.ClientConnInterface
}

func NewKvstoreClient(cc grpc.ClientConnInterface) KvstoreClient {
	return &kvstoreClient{cc}
}

func (c *kvstoreClient) PutKvstore(ctx context.Context, in *PutKvstoreRequest, opts ...grpc.CallOption) (*PutKvstoreReply, error) {
	out := new(PutKvstoreReply)
	err := c.cc.Invoke(ctx, "/api.kv.v1.Kvstore/PutKvstore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kvstoreClient) GetKvstore(ctx context.Context, in *GetKvstoreRequest, opts ...grpc.CallOption) (*GetKvstoreReply, error) {
	out := new(GetKvstoreReply)
	err := c.cc.Invoke(ctx, "/api.kv.v1.Kvstore/GetKvstore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KvstoreServer is the server API for Kvstore service.
// All implementations must embed UnimplementedKvstoreServer
// for forward compatibility
type KvstoreServer interface {
	PutKvstore(context.Context, *PutKvstoreRequest) (*PutKvstoreReply, error)
	GetKvstore(context.Context, *GetKvstoreRequest) (*GetKvstoreReply, error)
	mustEmbedUnimplementedKvstoreServer()
}

// UnimplementedKvstoreServer must be embedded to have forward compatible implementations.
type UnimplementedKvstoreServer struct {
}

func (*UnimplementedKvstoreServer) PutKvstore(context.Context, *PutKvstoreRequest) (*PutKvstoreReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutKvstore not implemented")
}
func (*UnimplementedKvstoreServer) GetKvstore(context.Context, *GetKvstoreRequest) (*GetKvstoreReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKvstore not implemented")
}
func (*UnimplementedKvstoreServer) mustEmbedUnimplementedKvstoreServer() {}

func RegisterKvstoreServer(s *grpc.Server, srv KvstoreServer) {
	s.RegisterService(&_Kvstore_serviceDesc, srv)
}

func _Kvstore_PutKvstore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutKvstoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvstoreServer).PutKvstore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.kv.v1.Kvstore/PutKvstore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvstoreServer).PutKvstore(ctx, req.(*PutKvstoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kvstore_GetKvstore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKvstoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvstoreServer).GetKvstore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.kv.v1.Kvstore/GetKvstore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvstoreServer).GetKvstore(ctx, req.(*GetKvstoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Kvstore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.kv.v1.Kvstore",
	HandlerType: (*KvstoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutKvstore",
			Handler:    _Kvstore_PutKvstore_Handler,
		},
		{
			MethodName: "GetKvstore",
			Handler:    _Kvstore_GetKvstore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kvstore.proto",
}
